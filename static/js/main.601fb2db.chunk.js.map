{"version":3,"sources":["components/Navbar/img/Sncf-logo.svg","components/BannerUnderNav/banner.jpg","components/Navbar/Navbar.js","components/BannerUnderNav/BannerUnderNav.js","components/CardItinerary/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","alt","src","logo","backgroundHomepage","title","urlLink","urlImg","Banner","BannerUnderNav","role","href","Card","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,oNCiB5BC,MAbf,WACE,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,2EACb,yBAAKA,UAAU,YAAYC,IAAI,OAAOC,IAAKC,MAC3C,wBAAIH,UAAU,4BAAd,kB,gBCNJI,G,MAAqB,CACzBC,MAAO,qBACPC,QAAS,0DACTC,OAAQC,MAeKC,EAZQ,WACrB,OACA,4BAAQC,KAAK,SAASV,UAAU,sBAChC,yBAAKA,UAAU,aACX,uBAAGW,KAAMP,EAAmBE,QAASD,MAAOD,EAAmBC,OAC7D,yBAAKL,UAAU,YAAYE,IAAKE,EAAmBG,OAAQN,IAAKG,EAAmBC,Y,MCc5EO,MA1Bf,WACC,OACC,yBAAKZ,UAAU,QACd,yBAAKA,UAAU,4DACd,yBAAKA,UAAU,yCACd,wBAAIA,UAAU,kBAAd,iBACA,4yB,MCUUa,MAXf,WACC,OACC,6BACC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,0BAAMH,KAAK,OAAOV,UAAU,oBCFXc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.601fb2db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Sncf-logo.8e3f2aad.svg\";","module.exports = __webpack_public_path__ + \"static/media/banner.b756f2d8.jpg\";","import React from \"react\";\nimport \"./navbar.css\";\nimport logo from \"./img/Sncf-logo.svg\";\n\nfunction Navbar() {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"mastheader bg-white Sticky-top col-12 py-5 d-flex justify-content-start\">\n          <img className=\"img-fluid\" alt=\"SNCF\" src={logo} />\n          <h1 className=\"ml-3 mt-4 text-uppercase\">Transilien</h1>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport Banner from './banner.jpg';\nimport \"./BannerUnderNav.css\";\n\nconst backgroundHomepage = {\n  title: \"Page éditoriale\",\n  urlLink: \"https://www.transilien.com/fr/page-editoriale/imagine-r\",\n  urlImg: Banner\n};\n\nconst BannerUnderNav = () => {\n  return (\n  <header role=\"banner\" className=\"row bannerHomepage\">\n  <div className=\"col-lg-12\">\n      <a href={backgroundHomepage.urlLink} title={backgroundHomepage.title}>\n        <img className=\"img-fluid\" src={backgroundHomepage.urlImg} alt={backgroundHomepage.title} />\n      </a>\n  </div>\n  </header>\n  );\n};\n\nexport default BannerUnderNav;","import React from \"react\";\nimport \"./card.css\";\n\nfunction Card() {\n\treturn (\n\t\t<div className=\"row \">\n\t\t\t<div className=\"col-sm-12 col-md-12 col-lg-8  mx-auto p-5 card-itinerary\">\n\t\t\t\t<div className=\"bg-white mb-3 rounded p-5 card-shadow\">\n\t\t\t\t\t<h2 className=\"text-uppercase\">Itinéraire</h2>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas\n\t\t\t\t\t\tultrices vel tellus quis sollicitudin. Donec et lorem non quam\n\t\t\t\t\t\tconsectetur venenatis. Etiam in lacinia nunc, non dapibus elit.\n\t\t\t\t\t\tPraesent vehicula lacinia magna, vel commodo enim euismod id.\n\t\t\t\t\t\tSuspendisse non lacus efficitur sapien pellentesque varius sed ut\n\t\t\t\t\t\tmi. Nam sed urna vel lectus fringilla venenatis. Ut suscipit eros ut\n\t\t\t\t\t\tfelis gravida molestie. Quisque feugiat justo ac lacus gravida, id\n\t\t\t\t\t\tvehicula nibh aliquet. Nunc mollis mattis augue id mattis.\n\t\t\t\t\t\tSuspendisse tempor justo vel est finibus sollicitudin. Nam metus\n\t\t\t\t\t\tmauris, eleifend sagittis feugiat nec, tempor at ex. Suspendisse\n\t\t\t\t\t\teros arcu, dictum non ante et, posuere facilisis magna. Etiam ac\n\t\t\t\t\t\turna nec mi fringilla facilisis sed scelerisque nibh. Curabitur id\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;\n","import React from \"react\";\nimport \"@sncf/bootstrap-sncf.metier/dist/bootstrap-sncf.min.css\";\nimport \"@sncf/bootstrap-sncf.metier/dist/bootstrap-sncf\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport BannerUnderNav from \"./components/BannerUnderNav/BannerUnderNav\";\nimport Card from \"./components/CardItinerary/Card\";\nimport \"./styles.css\";\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<Navbar />\n\t\t\t<BannerUnderNav />\n\t\t\t<Card />\n\t\t\t<main role=\"main\" className=\"mastcontainer\"></main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}